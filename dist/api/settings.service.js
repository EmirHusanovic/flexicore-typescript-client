"use strict";
/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
const core_1 = require("@angular/core");
const flexiCoreDecycle_1 = require("./flexiCoreDecycle");
const http_1 = require("@angular/http");
const http_2 = require("@angular/http");
const variables_1 = require("../variables");
const configuration_1 = require("../configuration");
let SettingsService = class SettingsService {
    constructor(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    extendObj(objA, objB) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * attach Property to metadata
     * @summary attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadata(settingsMetaId, propertyId, authenticationkey, value, extraHttpRequestParams) {
        return this.attachPropertyToMetadataWithHttpInfo(settingsMetaId, propertyId, authenticationkey, value, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * create Settings
     * @summary create settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettings(settingsMetadataId, authenticationkey, body, extraHttpRequestParams) {
        return this.createSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * creates a settings metadata
     * @summary creates Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadata(authenticationkey, body, extraHttpRequestParams) {
        return this.createSettingsMetadataWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * create Settings
     * @summary device get settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettings(settingsId, authenticationkey, extraHttpRequestParams) {
        return this.deviceGetSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * duplicate Settings
     * @summary duplicate settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettings(originalSettingsId, authenticationkey, body, extraHttpRequestParams) {
        return this.duplicateSettingsWithHttpInfo(originalSettingsId, authenticationkey, body, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * export Settings
     * @summary export settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettings(settingsId, authenticationkey, extraHttpRequestParams) {
        return this.exportSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * create Settings
     * @summary create settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettings(settingsId, authenticationkey, extraHttpRequestParams) {
        return this.getSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * import Settings
     * @summary import settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettings(authenticationkey, body, byName, dontUpdate, extraHttpRequestParams) {
        return this.importSettingsWithHttpInfo(authenticationkey, body, byName, dontUpdate, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * lists all settings
     * @summary lists all Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettings(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.listAllSettingsWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * lists all settings metadata
     * @summary lists all Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadata(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.listAllSettingsMetadataWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * list device Settings
     * @summary listDeviceSettingss
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettings(deviceId, authenticationkey, extraHttpRequestParams) {
        return this.listDeviceSettingsWithHttpInfo(deviceId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * list device Settings containers
     * @summary listDeviceSettingsContainers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainers(mac, authenticationkey, extraHttpRequestParams) {
        return this.listDeviceSettingsContainersWithHttpInfo(mac, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * lists settings
     * @summary lists Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettings(settingsMetadataId, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        return this.listSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * sets active settings for settingsMetadata
     * @summary setsActiveSettings
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettings(settingsMetaId, settingId, authenticationkey, extraHttpRequestParams) {
        return this.setActiveSettingsWithHttpInfo(settingsMetaId, settingId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * sets active settings for settingsMetadata as null(using default values)
     * @summary setActiveSettingsAsDefault
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefault(settingsMetaId, authenticationkey, extraHttpRequestParams) {
        return this.setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId, authenticationkey, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * update metadata property
     * @summary update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimple(linkId, authenticationkey, simpleValue, extraHttpRequestParams) {
        return this.updateMetadataSimpleWithHttpInfo(linkId, authenticationkey, simpleValue, extraHttpRequestParams)
            .map((response) => {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return flexiCoreDecycle_1.FlexiCoreDecycle.retrocycle(response.json()) || {};
            }
        });
    }
    /**
     * attach Property to metadata
     * attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadataWithHttpInfo(settingsMetaId, propertyId, authenticationkey, value, extraHttpRequestParams) {
        const path = this.basePath + '/settings/attachPropertyToMetadata/${settingsMetaId}/${propertyId}'
            .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId))
            .replace('${' + 'propertyId' + '}', String(propertyId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling attachPropertyToMetadata.');
        }
        // verify required parameter 'propertyId' is not null or undefined
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling attachPropertyToMetadata.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * create settings
     * create Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/settings/createSettings/${settingsMetadataId}'
            .replace('${' + 'settingsMetadataId' + '}', String(settingsMetadataId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsMetadataId' is not null or undefined
        if (settingsMetadataId === null || settingsMetadataId === undefined) {
            throw new Error('Required parameter settingsMetadataId was null or undefined when calling createSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * creates Settings Metadata
     * creates a settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadataWithHttpInfo(authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/settings/new';
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * device get settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/deviceGetSettings/${settingsId}'
            .replace('${' + 'settingsId' + '}', String(settingsId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling deviceGetSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * duplicate settings
     * duplicate Settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettingsWithHttpInfo(originalSettingsId, authenticationkey, body, extraHttpRequestParams) {
        const path = this.basePath + '/settings/duplicateSettings/${originalSettingsId}'
            .replace('${' + 'originalSettingsId' + '}', String(originalSettingsId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'originalSettingsId' is not null or undefined
        if (originalSettingsId === null || originalSettingsId === undefined) {
            throw new Error('Required parameter originalSettingsId was null or undefined when calling duplicateSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * export settings
     * export Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/exportSettings/${settingsId}'
            .replace('${' + 'settingsId' + '}', String(settingsId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling exportSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * create settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/${settingsId}'
            .replace('${' + 'settingsId' + '}', String(settingsId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling getSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * import settings
     * import Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettingsWithHttpInfo(authenticationkey, body, byName, dontUpdate, extraHttpRequestParams) {
        const path = this.basePath + '/settings/importSettings';
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (byName !== undefined && byName !== null) {
            headers.set('byName', String(byName));
        }
        if (dontUpdate !== undefined && dontUpdate !== null) {
            headers.set('dontUpdate', String(dontUpdate));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * lists all Settings
     * lists all settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/settings/listAllSettings';
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * lists all Settings Metadata
     * lists all settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadataWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/settings';
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * listDeviceSettingss
     * list device Settings
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsWithHttpInfo(deviceId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/listDeviceSettings/${deviceId}'
            .replace('${' + 'deviceId' + '}', String(deviceId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling listDeviceSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * listDeviceSettingsContainers
     * list device Settings containers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainersWithHttpInfo(mac, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/listDeviceSettingsContainers/${mac}'
            .replace('${' + 'mac' + '}', String(mac));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mac' is not null or undefined
        if (mac === null || mac === undefined) {
            throw new Error('Required parameter mac was null or undefined when calling listDeviceSettingsContainers.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * lists Settings
     * lists settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams) {
        const path = this.basePath + '/settings/listSettings/${settingsMetadataId}'
            .replace('${' + 'settingsMetadataId' + '}', String(settingsMetadataId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsMetadataId' is not null or undefined
        if (settingsMetadataId === null || settingsMetadataId === undefined) {
            throw new Error('Required parameter settingsMetadataId was null or undefined when calling listSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }
        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        headers.set('Content-Type', 'application/json');
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * setsActiveSettings
     * sets active settings for settingsMetadata
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsWithHttpInfo(settingsMetaId, settingId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/setActiveSettings/${settingsMetaId}/${settingId}'
            .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId))
            .replace('${' + 'settingId' + '}', String(settingId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling setActiveSettings.');
        }
        // verify required parameter 'settingId' is not null or undefined
        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling setActiveSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * setActiveSettingsAsDefault
     * sets active settings for settingsMetadata as null(using default values)
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId, authenticationkey, extraHttpRequestParams) {
        const path = this.basePath + '/settings/setActiveSettingsAsDefault/${settingsMetaId}'
            .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling setActiveSettingsAsDefault.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
    /**
     * update metadata property
     * update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimpleWithHttpInfo(linkId, authenticationkey, simpleValue, extraHttpRequestParams) {
        const path = this.basePath + '/settings/updateMetadataSimple/${linkId}'
            .replace('${' + 'linkId' + '}', String(linkId));
        let queryParameters = new http_1.URLSearchParams();
        let headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling updateMetadataSimple.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }
        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }
        // to determine the Accept header
        let produces = [
            'application/json'
        ];
        let requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    }
};
SettingsService = __decorate([
    core_1.Injectable(),
    __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
], SettingsService);
exports.SettingsService = SettingsService;
//# sourceMappingURL=settings.service.js.map