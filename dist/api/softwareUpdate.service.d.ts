/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs';
import { BasicContainer } from '../model/basicContainer';
import { DeviceContainer } from '../model/deviceContainer';
import { DeviceToFileUpdate } from '../model/deviceToFileUpdate';
import { DeviceToSoftwareUpdate } from '../model/deviceToSoftwareUpdate';
import { ExportRequestContainer } from '../model/exportRequestContainer';
import { FileResource } from '../model/fileResource';
import { FileUpdate } from '../model/fileUpdate';
import { FileUpdateContainer } from '../model/fileUpdateContainer';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { Job } from '../model/job';
import { LinkContainer } from '../model/linkContainer';
import { LogRequest } from '../model/logRequest';
import { SettingsContainer } from '../model/settingsContainer';
import { Software } from '../model/software';
import { SoftwareUpdateContainer } from '../model/softwareUpdateContainer';
import { UpdateBundle } from '../model/updateBundle';
import { UpdateableDevice } from '../model/updateableDevice';
import { UpdateableDeviceCompatiableContainer } from '../model/updateableDeviceCompatiableContainer';
import { UpdatesDownloadRequestContainer } from '../model/updatesDownloadRequestContainer';
import { Configuration } from '../configuration';
export declare class SoftwareUpdateService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    activateDevice(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param deviceId
     * @param fileResourceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    addDeviceInitiatedLog(deviceId: string, fileResourceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param deviceId
     * @param updateFileId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param locationOnDevice
     * @param keepOriginal
     * @param name
     * @param shouldExtract
     * @param deleteAfterExtract
     * @param interval
     * @param startMilis
     */
    attachDeviceToFileUpdate(deviceId: string, updateFileId: string, authenticationKey?: string, locationOnDevice?: string, keepOriginal?: boolean, name?: string, shouldExtract?: boolean, deleteAfterExtract?: boolean, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<DeviceToFileUpdate>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param lat
     * @param lon
     * @param serialNumber
     */
    checkDeviceActivatedAndUpdateLocation(id: string, authenticationKey?: string, lat?: number, lon?: number, serialNumber?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    checkFoLogRequests(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<LogRequest>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearDeviceUpdateLinks(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearFileUpdates(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearLogs(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearUpdateLink(linkId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param fileUpdateId
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    closeFetchRequest(fileUpdateId: string, linkId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    closeRequest(linkId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    confirmRestart(linkId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param bundleName
     */
    createUpdateBundle(authenticationKey?: string, body?: Array<string>, bundleName?: string, extraHttpRequestParams?: any): Observable<UpdateBundle>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateDevice(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    exportUpdates(authenticationKey?: string, body?: ExportRequestContainer, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDevicesDevices(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDevicesName(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDuplicateMacs(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getDuplicatedMacs(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param locationOnDevice
     * @param keepOriginal
     * @param name
     * @param generationRequest
     * @param interval
     * @param startMilis
     */
    getFileFromDeviceRequest(deviceId: string, authenticationKey?: string, locationOnDevice?: string, keepOriginal?: boolean, name?: string, generationRequest?: string, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<DeviceToFileUpdate>;
    /**
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    getMinimumCheckInterval(mac: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<number>;
    /**
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getPendingFileUpdates(mac: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<FileUpdateContainer>>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param startingDate
     */
    getPeriodicFilesForFileUpdate(id: string, authenticationKey?: string, startingDate?: Date, extraHttpRequestParams?: any): Observable<Array<BasicContainer>>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param startingDate
     */
    getPeriodicFilesForLogRequests(id: string, authenticationKey?: string, startingDate?: Date, extraHttpRequestParams?: any): Observable<Array<BasicContainer>>;
    /**
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getRequiredUpdates(mac: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<SoftwareUpdateContainer>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getSoftwareToRestart(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<LinkContainer>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDeviceFileUpdates(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<FileUpdateContainer>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDeviceInstalledSoftwares(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<Software>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicePendingInstallSoftwares(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<SoftwareUpdateContainer>>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicePendingLogRequests(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<LogRequest>>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettings(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<SettingsContainer>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param serial
     * @param mac
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevices(authenticationKey?: string, body?: FilteringInformationHolder, serial?: string, mac?: string, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<UpdateableDevice>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listFileUpdates(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<FileUpdate>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listSoftwares(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<Software>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listUpdateBundle(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<UpdateBundle>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listUpdateFiles(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<FileUpdate>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    massDownload(authenticationKey?: string, body?: UpdatesDownloadRequestContainer, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    prepareFileResourceBundle(authenticationKey?: string, body?: Array<string>, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param serialNumber
     * @param body
     */
    register(mac: string, authenticationKey?: string, serialNumber?: string, body?: DeviceContainer, extraHttpRequestParams?: any): Observable<UpdateableDeviceCompatiableContainer>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param filter
     * @param level
     * @param interval
     * @param startMilis
     */
    requestLog(deviceId: string, authenticationKey?: string, filter?: string, level?: string, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<LogRequest>;
    /**
     *
     * @param deviceId
     * @param softwareId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    setSoftwareToRestart(deviceId: string, softwareId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param serialNumber
     */
    updateDeviceStatusAndGetIsActivate(id: string, authenticationKey?: string, body?: DeviceContainer, serialNumber?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param requestId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    updateFileUpdateStarted(requestId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateMultipleSoftware(deviceId: string, authenticationKey?: string, body?: Array<string>, extraHttpRequestParams?: any): Observable<Array<DeviceToSoftwareUpdate>>;
    /**
     *
     * @param requestId
     * @param fileResourceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param logDate
     */
    updateRequestLogAsCompleted(requestId: string, fileResourceId: string, authenticationKey?: string, logDate?: number, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param requestId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    updateRequestLogAsGathered(requestId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param softwareId
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateSoftware(softwareId: string, deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<DeviceToSoftwareUpdate>;
    /**
     *
     * @param bundleId
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateSoftwareBundle(bundleId: string, deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Array<DeviceToSoftwareUpdate>>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateCompleted(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateStarted(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateVerified(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    activateDeviceWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param fileResourceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    addDeviceInitiatedLogWithHttpInfo(deviceId: string, fileResourceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param updateFileId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param locationOnDevice
     * @param keepOriginal
     * @param name
     * @param shouldExtract
     * @param deleteAfterExtract
     * @param interval
     * @param startMilis
     */
    attachDeviceToFileUpdateWithHttpInfo(deviceId: string, updateFileId: string, authenticationKey?: string, locationOnDevice?: string, keepOriginal?: boolean, name?: string, shouldExtract?: boolean, deleteAfterExtract?: boolean, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param lat
     * @param lon
     * @param serialNumber
     */
    checkDeviceActivatedAndUpdateLocationWithHttpInfo(id: string, authenticationKey?: string, lat?: number, lon?: number, serialNumber?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    checkFoLogRequestsWithHttpInfo(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearDeviceUpdateLinksWithHttpInfo(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearFileUpdatesWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearLogsWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    clearUpdateLinkWithHttpInfo(linkId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param fileUpdateId
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    closeFetchRequestWithHttpInfo(fileUpdateId: string, linkId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    closeRequestWithHttpInfo(linkId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param linkId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    confirmRestartWithHttpInfo(linkId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param bundleName
     */
    createUpdateBundleWithHttpInfo(authenticationKey?: string, body?: Array<string>, bundleName?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateDeviceWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    exportUpdatesWithHttpInfo(authenticationKey?: string, body?: ExportRequestContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDevicesDevicesWithHttpInfo(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDevicesNameWithHttpInfo(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    fixDuplicateMacsWithHttpInfo(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getDuplicatedMacsWithHttpInfo(authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param locationOnDevice
     * @param keepOriginal
     * @param name
     * @param generationRequest
     * @param interval
     * @param startMilis
     */
    getFileFromDeviceRequestWithHttpInfo(deviceId: string, authenticationKey?: string, locationOnDevice?: string, keepOriginal?: boolean, name?: string, generationRequest?: string, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    getMinimumCheckIntervalWithHttpInfo(mac: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getPendingFileUpdatesWithHttpInfo(mac: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param startingDate
     */
    getPeriodicFilesForFileUpdateWithHttpInfo(id: string, authenticationKey?: string, startingDate?: Date, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param startingDate
     */
    getPeriodicFilesForLogRequestsWithHttpInfo(id: string, authenticationKey?: string, startingDate?: Date, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getRequiredUpdatesWithHttpInfo(mac: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    getSoftwareToRestartWithHttpInfo(deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDeviceFileUpdatesWithHttpInfo(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDeviceInstalledSoftwaresWithHttpInfo(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicePendingInstallSoftwaresWithHttpInfo(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicePendingLogRequestsWithHttpInfo(deviceId: string, authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param serial
     * @param mac
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicesWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, serial?: string, mac?: string, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listFileUpdatesWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listSoftwaresWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listUpdateBundleWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listUpdateFilesWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    massDownloadWithHttpInfo(authenticationKey?: string, body?: UpdatesDownloadRequestContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    prepareFileResourceBundleWithHttpInfo(authenticationKey?: string, body?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param mac
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param serialNumber
     * @param body
     */
    registerWithHttpInfo(mac: string, authenticationKey?: string, serialNumber?: string, body?: DeviceContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param filter
     * @param level
     * @param interval
     * @param startMilis
     */
    requestLogWithHttpInfo(deviceId: string, authenticationKey?: string, filter?: string, level?: string, interval?: number, startMilis?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param softwareId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    setSoftwareToRestartWithHttpInfo(deviceId: string, softwareId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param serialNumber
     */
    updateDeviceStatusAndGetIsActivateWithHttpInfo(id: string, authenticationKey?: string, body?: DeviceContainer, serialNumber?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param requestId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    updateFileUpdateStartedWithHttpInfo(requestId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateMultipleSoftwareWithHttpInfo(deviceId: string, authenticationKey?: string, body?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param requestId
     * @param fileResourceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param logDate
     */
    updateRequestLogAsCompletedWithHttpInfo(requestId: string, fileResourceId: string, authenticationKey?: string, logDate?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param requestId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param dateCompleted
     */
    updateRequestLogAsGatheredWithHttpInfo(requestId: string, authenticationKey?: string, dateCompleted?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param softwareId
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateSoftwareWithHttpInfo(softwareId: string, deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param bundleId
     * @param deviceId
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateSoftwareBundleWithHttpInfo(bundleId: string, deviceId: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateCompletedWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateStartedWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     */
    updateUpdateVerifiedWithHttpInfo(id: string, authenticationKey?: string, extraHttpRequestParams?: any): Observable<Response>;
}
