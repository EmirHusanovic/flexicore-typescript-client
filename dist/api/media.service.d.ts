/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { FileResource } from '../model/fileResource';
import { FileResourceBundleHolder } from '../model/fileResourceBundleHolder';
import { FileType } from '../model/fileType';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { Media } from '../model/media';
import { Configuration } from '../configuration';
export declare class MediaService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * attachs a file resource to the given media , using primary bundle
     * @summary attach file resource
     * @param mediaId
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     */
    attachFileResource(mediaId: string, fileResourceId: string, authenticationkey?: string, group?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    changeMediaPrimaryFileResourceBundle(id: string, fileResourceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    countAllofType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<number>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    create(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteMedia(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    fileResourcesOfType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param targetDevice
     */
    get(id: string, authenticationkey?: string, targetDevice?: string, extraHttpRequestParams?: any): Observable<Media>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllFileTypes(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<FileType>>;
    /**
     *
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFields(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getPreview(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param grouping
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    getRenderingBundles(grouping: string, id: string, authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Array<FileResourceBundleHolder>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    listAll(authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Array<Media>>;
    /**
     * lists all media that suites Filtering information holder
     * @summary fileResourcesInMediaByGroup
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllFileResourcesOfGroupInMedia(id: string, authenticationkey?: string, group?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     * returns all the file resources of the given types that are connected to the given Media
     * @summary get file resources
     * @param mediaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllFileResourcesOfType(mediaId: string, authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     * lists all media that suites Filtering information holder
     * @summary
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllofType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<Media>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    update(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param id
     * @param updateTo
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateVersion(id: string, updateTo: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * attach file resource
     * attachs a file resource to the given media , using primary bundle
     * @param mediaId
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     */
    attachFileResourceWithHttpInfo(mediaId: string, fileResourceId: string, authenticationkey?: string, group?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    changeMediaPrimaryFileResourceBundleWithHttpInfo(id: string, fileResourceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    countAllofTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createWithHttpInfo(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteMediaWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    fileResourcesOfTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param targetDevice
     */
    getWithHttpInfo(id: string, authenticationkey?: string, targetDevice?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllFileTypesWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFieldsWithHttpInfo(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getPreviewWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param grouping
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    getRenderingBundlesWithHttpInfo(grouping: string, id: string, authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    listAllWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * fileResourcesInMediaByGroup
     * lists all media that suites Filtering information holder
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllFileResourcesOfGroupInMediaWithHttpInfo(id: string, authenticationkey?: string, group?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * get file resources
     * returns all the file resources of the given types that are connected to the given Media
     * @param mediaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllFileResourcesOfTypeWithHttpInfo(mediaId: string, authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * lists all media that suites Filtering information holder
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllofTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateWithHttpInfo(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param updateTo
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateVersionWithHttpInfo(id: string, updateTo: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
}
