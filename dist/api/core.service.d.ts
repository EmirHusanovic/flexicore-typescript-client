/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Baseclass } from '../model/baseclass';
import { BaseclassCreationContainer } from '../model/baseclassCreationContainer';
import { BaseclassUpdateContainer } from '../model/baseclassUpdateContainer';
import { Baselink } from '../model/baselink';
import { BasicContainer } from '../model/basicContainer';
import { Category } from '../model/category';
import { Clazz } from '../model/clazz';
import { ClazzLinkContainer } from '../model/clazzLinkContainer';
import { Device } from '../model/device';
import { DevicePropertyContainerObject } from '../model/devicePropertyContainerObject';
import { DeviceSettingsContainer } from '../model/deviceSettingsContainer';
import { DeviceToBaseclass } from '../model/deviceToBaseclass';
import { DeviceUsedPropertiesContainer } from '../model/deviceUsedPropertiesContainer';
import { FieldContainer } from '../model/fieldContainer';
import { FileResource } from '../model/fileResource';
import { FileResourceBundleHolder } from '../model/fileResourceBundleHolder';
import { FileType } from '../model/fileType';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { Job } from '../model/job';
import { LicenseRequest } from '../model/licenseRequest';
import { LicensingFeature } from '../model/licensingFeature';
import { LicensingProduct } from '../model/licensingProduct';
import { LinkContainer } from '../model/linkContainer';
import { Media } from '../model/media';
import { MultipartFormDataInput } from '../model/multipartFormDataInput';
import { NewUser } from '../model/newUser';
import { NewUserUserClass } from '../model/newUserUserClass';
import { Operation } from '../model/operation';
import { PluginInformationHolder } from '../model/pluginInformationHolder';
import { Property } from '../model/property';
import { PropertyContainerSerializable } from '../model/propertyContainerSerializable';
import { PropertySetContainerBaseclass } from '../model/propertySetContainerBaseclass';
import { PropertyToBaseclass } from '../model/propertyToBaseclass';
import { PropertyToClazz } from '../model/propertyToClazz';
import { PropertyToSettingsMetadata } from '../model/propertyToSettingsMetadata';
import { PropertyType } from '../model/propertyType';
import { Role } from '../model/role';
import { RoleToUser } from '../model/roleToUser';
import { RoleUserContainer } from '../model/roleUserContainer';
import { RunningUser } from '../model/runningUser';
import { Settings } from '../model/settings';
import { SettingsContainer } from '../model/settingsContainer';
import { SettingsMetadata } from '../model/settingsMetadata';
import { SettingsMetadataCreationContainer } from '../model/settingsMetadataCreationContainer';
import { Tenant } from '../model/tenant';
import { UIComponent } from '../model/uIComponent';
import { UIComponentsRegistrationContainer } from '../model/uIComponentsRegistrationContainer';
import { UpdateBundle } from '../model/updateBundle';
import { UserClass } from '../model/userClass';
import { View } from '../model/view';
import { Configuration } from '../configuration';
export declare class CoreService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * activate a link between a device and baseclass
     * @summary activateLink
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    activateLink(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param roleId
     * @param userId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    addUserToRole(roleId: string, userId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param id
     * @param crtId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    attachCertificate(id: string, crtId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * attachs a file resource to the given media , using primary bundle
     * @summary attach file resource
     * @param mediaId
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     */
    attachFileResource(mediaId: string, fileResourceId: string, authenticationkey?: string, group?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * attach Property to metadata
     * @summary attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadata(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    attachTenant(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param id
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    changeMediaPrimaryFileResourceBundle(id: string, fileResourceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     */
    checkDBAvailable(extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Connect a Category to an instance of any entity in the system
     * @summary Connect to Category
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param catId The ID of an existing Category
     */
    connectCategory(baseId: string, authenticationkey?: string, catId?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Connect a Device to an instance of any entity in the system
     * @summary connectDeviceToBaseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param someHeader
     */
    connectDeviceToBaseclass(baseId: string, mac: string, authenticationkey?: string, someHeader?: string, extraHttpRequestParams?: any): Observable<DeviceToBaseclass>;
    /**
     * Connect a property and a baseclass with a complex type, this is the actual action of assigning a Complex Value of a property to a specific Baseclass , any Baseclasss
     * @summary connect Property
     * @param propertyId the ID of the Property instance to use
     * @param baseclassId The ID of the Baseclass to which we want to assign this complex value
     * @param valueId The ID of the ? extends Baseclass which is the complex value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    connectPropertyComplex(propertyId: string, baseclassId: string, valueId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<PropertyToBaseclass>;
    /**
     * Connect property and a baseclass with simple value, assign a value of a Property to an instance of Baseclass, any Baseclass instance
     * @summary connect Property
     * @param propertyId The ID of the property, this Property must be connected eith the Clazz of the Baseclass in the baseclass_id parameter
     * @param baseclassId The Baseclass instance to which this value (for that property) is set
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue The value to set, must be a String
     */
    connectPropertySimple(propertyId: string, baseclassId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<PropertyToBaseclass>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    connectToTenant(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param type
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    count(type: string, authenticationkey?: string, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<number>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    countAllofType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<number>;
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countConnected(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<number>;
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countDisconnected(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<number>;
    /**
     * Creates a new instance of the requested Class, pass a properly initialized instance of BaseclassCreationContainer
     * @summary Create an instance of a Baseclass extender
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    create(authenticationkey?: string, body?: BaseclassCreationContainer, extraHttpRequestParams?: any): Observable<string>;
    /**
     * Creates a link between two instances in a generic way, provide values of the link
     * @summary Create a link
     * @param leftId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param rightId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value The ID of any instance inheriting from FC Baseclass, this effectively creates a triple link
     * @param simpleValue An explicit value of a string that can be part of the link
     * @param check If true, check if the link with these Left, Right and Complex Value values exists, if yes, then it will not be created
     */
    createBaselink(leftId: string, rightId: string, linkClazzName: string, authenticationkey?: string, value?: string, simpleValue?: string, check?: boolean, extraHttpRequestParams?: any): Observable<Baselink>;
    /**
     * Return a single category
     * @summary Create a Category
     * @param categoryName Inside a user interface categories are displayed by thier name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createCategory(categoryName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Category>;
    /**
     * creates a device
     * @summary createDevice
     * @param mac
     * @param serialNumber
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param name
     * @param lat
     * @param lon
     */
    createDevice(mac: string, serialNumber: string, authenticationkey?: string, name?: string, lat?: number, lon?: number, extraHttpRequestParams?: any): Observable<Device>;
    /**
     * create heap dump
     * @summary createHeapDump
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     */
    createHeapDump(authenticationkey?: string, path?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     * creates a property given a type and a name, properties can be created and linked with Types. instances of these types can have associated values
     * @summary creates Property
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyName
     * @param propertyType
     */
    createProperty(authenticationkey?: string, propertyName?: string, propertyType?: string, extraHttpRequestParams?: any): Observable<Property>;
    /**
     * creates a property Type given  a name
     * @summary creates Property Type
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyTypeName  the name of the property type to create
     */
    createPropertyType(authenticationkey?: string, propertyTypeName?: string, extraHttpRequestParams?: any): Observable<PropertyType>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createRole(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Role>;
    /**
     * create Settings
     * @summary create settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettings(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings>;
    /**
     * creates a settings metadata
     * @summary creates Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadata(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<SettingsMetadata>;
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenant(tenantName: string, apiKey: string, authenticationkey?: string, body?: NewUser, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUser(tenantName: string, apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess
     * @param body
     */
    createUser(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<RunningUser>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    create_1(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * deactivate all links between a device and baseclass
     * @summary deactivateAllLinks
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateAllLinks(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<number>;
    /**
     * deactivate link
     * @summary deactivateLink
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateLink(linkId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * deletes an entity by id
     * @summary delete
     * @param id The id of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * deletes an entity by id
     * @summary delete
     * @param id The id of the instance to be deleted
     * @param className The type of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById_2(id: string, className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * delete heap dump
     * @summary deleteHeapDump
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteHeapDump(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteMedia(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Remove an existing link by the ID of its 'sides'
     * @summary Remove a link
     * @param leftId The ID of the left side of the link
     * @param rightId The ID of the right side of the link
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    detachEntities(leftId: string, rightId: string, linkClazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * create Settings
     * @summary device get settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer>;
    /**
     * Disable a previously disabled Category, the CategoryID to be enabled is passed as the entity in the Post request(!)
     * @summary Disable Category on Class
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.User&#39;
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    disableCategory(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Disconnect a Category from an instance of a connected(to this Category) entity in the system
     * @summary Disconnect from Category
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass and connected to the specified Category
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param catId The ID of an existing Category
     */
    disconnectCategory(baseId: string, authenticationkey?: string, catId?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param id id of the FileResource Object to Download
     */
    download(authenticationkey: string, id: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * duplicate an entity by Id , returns null if not successfully duplicated
     * @summary duplicate an entity, shallow by id
     * @param id The ID of the entity required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    duplicate(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Baseclass>;
    /**
     * duplicate Settings
     * @summary duplicate settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettings(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings>;
    /**
     * Before a Category can be connected to an INSTANCE of a class it must be enabled to the class, thus a list of categories can be easily filtered by the context of the class at hand, the CategoryID to be enabled is passed as the entity in the Post request(!)
     * @summary Enable Category on Class
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.User&#39;
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    enableCategory(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * exports to file
     * @summary export baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportBaseclass(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     * export Settings
     * @summary export settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    fileResourcesOfType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     * finalize FileResource , sending it for processing
     * @summary finalize
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param hint
     * @param fileType
     * @param dontProcess
     */
    finalizeUpload(md5: string, authenticationkey?: string, hint?: string, fileType?: string, dontProcess?: boolean, extraHttpRequestParams?: any): Observable<Job>;
    /**
     * Find an entity by Id and type, returns null if not found
     * @summary find entity by id and class
     * @param id The ID of the entity required
     * @param classname The canonical classname of the required entity
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById(id: string, classname: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Baseclass>;
    /**
     * Find an instance of a Baseclass extender by its id, returns an instance of a Baseclass
     * @summary Find an instance by ID
     * @param ID The id of instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_3(ID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Baseclass>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_4(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Role>;
    /**
     * returns a list of instances of the type requested
     * @summary Find an instance by its name
     * @param name The name of instance to be found
     * @param classname The cannonical classname of the instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByName(name: string, classname: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     */
    findBySidesId(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinks(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Baselink>>;
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksContainers(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<LinkContainer>>;
    /**
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksValues(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     *
     * @param clientType
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    generateClient(clientType: string, authenticationkey?: string, view?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param targetDevice
     */
    get(id: string, authenticationkey?: string, targetDevice?: string, extraHttpRequestParams?: any): Observable<Media>;
    /**
     * Get a list of all Categories whose name starts with the supplied string
     * @summary Get a list of Categories  by name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getAllCategories(authenticationkey?: string, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Category>>;
    /**
     * Get a list of all Categories that are connected to an instance
     * @summary List Categories  by Instance
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllCategoriesConnected(baseId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllFileTypes(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<FileType>>;
    /**
     * Get a list of all Operations defined for the this Class, Some Operations have meaning with some Classes only
     * @summary Get all Operations
     * @param clazzName The canonical classname of the link required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllOperations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Operation>>;
    /**
     * returns a list of views
     * @summary
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllViews(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<View>>;
    /**
     * Returns a list of ClazzLinkContainer instances of the given link(!) canonical name
     * @summary Get a list of all associations
     * @param clazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAssociations(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<ClazzLinkContainer>>;
    /**
     * Get a list of all Categories that can be used (previously enabled) by a Class
     * @summary List Categories  by Class
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.media.Media&#39; will retrieve only Categories that can be used with a Media Object(Instance)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getCategory(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Category>>;
    /**
     * Get a list of all Categories whose name starts with the supplied string
     * @summary Get a list of Categories  by name
     * @param name A string that must match the left characters of a retrieved Category name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getCategoryByName(name: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Category>>;
    /**
     * Return a concrete instance of type Clazz, every type in the system including those created by Plug-ins have a concrete instance of Clazz type describing it.
     * @summary Get a Clazz instance from a canonical name
     * @param clazzName The canonical classname for which the instance is required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getClazz(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Clazz>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getClients(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getConnected(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     * update device used properties
     * @summary getDeviceUsedProperties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    getDeviceUsedProperties(mac: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<DevicePropertyContainerObject>>;
    /**
     *
     * @param id
     * @param wantedClazzName
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getDisconnected(id: string, wantedClazzName: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    getDocs(authenticationkey: string, view?: string, extraHttpRequestParams?: any): Observable<string>;
    /**
     * get all properties connected to baseclass
     * @summary get Connected Properties
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyClazz
     * @param plainView
     */
    getDynamicProperties(id: string, authenticationkey?: string, propertyClazz?: string, plainView?: boolean, extraHttpRequestParams?: any): Observable<Array<PropertyContainerSerializable>>;
    /**
     * get all properties connected to baseclass
     * @summary get Connected Properties With Categories
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyClazz
     * @param plainView
     */
    getDynamicPropertiesWithCategories(id: string, authenticationkey?: string, propertyClazz?: string, plainView?: boolean, extraHttpRequestParams?: any): Observable<Array<PropertyContainerSerializable>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    getFeatures(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<LicensingFeature>>;
    /**
     * get a list of all FieldContainers per class, use it for the creation of a new instance and for updating one
     * @summary Get Field Containers per class
     * @param clazzName The canonical name of the Class for which the list is to be obtained
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFields(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<FieldContainer>>;
    /**
     *
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFields_5(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFileResource(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getJob(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    getOffsetInfo(authenticationkey?: string, body?: UpdateBundle, extraHttpRequestParams?: any): Observable<UpdateBundle>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getPreview(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    getProducts(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<LicensingProduct>>;
    /**
     *
     * @param grouping
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    getRenderingBundles(grouping: string, id: string, authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Array<FileResourceBundleHolder>>;
    /**
     * create Settings
     * @summary create settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    getSwaggerJSON(authenticationkey: string, view?: string, extraHttpRequestParams?: any): Observable<string>;
    /**
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenant(apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Tenant>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenants(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Tenant>>;
    /**
     *
     * @param viewId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getViewClazzes(viewId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Clazz>>;
    /**
     * import baseclass
     * @summary import baseclass
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    importBaseclass(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * import Settings
     * @summary import settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettings(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    invalidateCache(authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param leftId
     * @param rightId
     * @param operationId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    linkBaseclassTouser(leftId: string, rightId: string, operationId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Helper class for linking Role and User using a RoleUserContainer class, can be carried out by using the Generic createBaselink call
     * @summary Link Role and User
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    linkroleuser(authenticationkey?: string, body?: RoleUserContainer, extraHttpRequestParams?: any): Observable<RoleToUser>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    listAll(authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Array<Media>>;
    /**
     * lists all media that suites Filtering information holder
     * @summary fileResourcesInMediaByGroup
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllFileResourcesOfGroupInMedia(id: string, authenticationkey?: string, group?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     * returns all the file resources of the given types that are connected to the given Media
     * @summary get file resources
     * @param mediaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllFileResourcesOfType(mediaId: string, authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listAllLoadedPlugins(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<PluginInformationHolder>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllRoles(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Role>>;
    /**
     * lists all settings
     * @summary lists all Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettings(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>>;
    /**
     * lists all settings metadata
     * @summary lists all Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadata(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<SettingsMetadata>>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listAllUserRoles(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<Role>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllUsers(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<UserClass>>;
    /**
     * lists all media that suites Filtering information holder
     * @summary
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllofType(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<Media>>;
    /**
     * list device Settings
     * @summary listDeviceSettingss
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettings(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<DeviceSettingsContainer>>;
    /**
     * list device Settings containers
     * @summary listDeviceSettingsContainers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainers(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<SettingsContainer>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevices(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<Device>>;
    /**
     * list heap dumps
     * @summary listHeapDumps
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param start
     */
    listHeapDumps(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, start?: number, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     * lists license requests
     * @summary
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listLicenseRequest(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Array<LicenseRequest>>;
    /**
     * get all Properties, paged, filtered and sorted by a FilteringInformationHolder
     * @summary listProperties
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listProperties(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<Property>>;
    /**
     * get all property types, filtered and sorted
     * @summary listPropertyTypes
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listPropertyTypes(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<PropertyType>>;
    /**
     * lists settings
     * @summary lists Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettings(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>>;
    /**
     *
     * @param email
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    lookupUserByEmail(email: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<UserClass>;
    /**
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    lookupUserById(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<UserClass>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param number
     */
    multipleCreate(authenticationkey?: string, number?: number, extraHttpRequestParams?: any): Observable<number>;
    /**
     * returns a list of instances of the type requested
     * @summary Find an instance by its name with wildcard
     * @param classname The canonical classname of the required entity list
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    nameLike(classname: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Baseclass>>;
    /**
     *
     */
    ping(extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * registers components if not exists and returns allowed
     * @summary registerAndGetAllowedUIComponents
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    registerAndGetAllowedUIComponents(authenticationkey?: string, body?: UIComponentsRegistrationContainer, extraHttpRequestParams?: any): Observable<Array<UIComponent>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param calcMd5
     */
    registerFile(authenticationkey?: string, path?: string, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param hint
     * @param fileType
     * @param dontProcess
     * @param calcMd5
     */
    registerFileAndFinlize(authenticationkey?: string, path?: string, hint?: string, fileType?: string, dontProcess?: boolean, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Job>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    restart(authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * sets active settings for settingsMetadata
     * @summary setsActiveSettings
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettings(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * sets active settings for settingsMetadata as null(using default values)
     * @summary setActiveSettingsAsDefault
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefault(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * update device used properties
     * @summary setDeviceUsedProperties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setDeviceUsedProperties(mac: string, authenticationkey?: string, body?: DeviceUsedPropertiesContainer, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Sets Link as Updated
     * @summary setLinkUpdateDate
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param date
     */
    setLinkUpdateDate(linkId: string, authenticationkey?: string, date?: Date, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * set Property to use with specific Clazz, a Clazz is an Entity in FlexiCore, the PropertySetContainer has the required default values for both simple and complex values
     * @summary set Property
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setProperty(authenticationkey?: string, body?: PropertySetContainerBaseclass, extraHttpRequestParams?: any): Observable<PropertyToClazz>;
    /**
     * soft delete baseclass
     * @summary softDelete
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    softDelete(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    stopJob(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    testUpdate(authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Update an instance,retrieve the related fields first, create BaseclassUpdateContainer with required fields
     * @summary Update an instance of a Baseclass extender
     * @param id
     * @param clazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    update(id: string, clazzName: string, authenticationkey?: string, body?: BaseclassUpdateContainer, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Update an instance of a Baseclass using a BasicContainer instance
     * @summary Update basic data
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateBasicDetails(authenticationkey?: string, body?: BasicContainer, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     *
     * @param jobID
     * @param phaseName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPhase(jobID: string, phaseName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param jobID
     * @param key
     * @param value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobProperty(jobID: string, key: string, value: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * update metadata property
     * @summary update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimple(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata>;
    /**
     * update Simple value of a Dynamic Property of a Baseclass instance
     * @summary updateSimple
     * @param linkId The link id (of PropertyToBaseclass type)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue The value to update
     */
    updateSimple(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<PropertyToBaseclass>;
    /**
     *
     * @param id
     * @param updateTo
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateVersion(id: string, updateTo: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    update_6(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<{}>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    uploadFileMulti(authenticationkey?: string, body?: MultipartFormDataInput, extraHttpRequestParams?: any): Observable<Array<FileResource>>;
    /**
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    validate(authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * activateLink
     * activate a link between a device and baseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    activateLinkWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param roleId
     * @param userId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    addUserToRoleWithHttpInfo(roleId: string, userId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param crtId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    attachCertificateWithHttpInfo(id: string, crtId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * attach file resource
     * attachs a file resource to the given media , using primary bundle
     * @param mediaId
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     */
    attachFileResourceWithHttpInfo(mediaId: string, fileResourceId: string, authenticationkey?: string, group?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * attach Property to metadata
     * attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadataWithHttpInfo(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    attachTenantWithHttpInfo(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param fileResourceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    changeMediaPrimaryFileResourceBundleWithHttpInfo(id: string, fileResourceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     */
    checkDBAvailableWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Connect to Category
     * Connect a Category to an instance of any entity in the system
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param catId The ID of an existing Category
     */
    connectCategoryWithHttpInfo(baseId: string, authenticationkey?: string, catId?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * connectDeviceToBaseclass
     * Connect a Device to an instance of any entity in the system
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param someHeader
     */
    connectDeviceToBaseclassWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, someHeader?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * connect Property
     * Connect a property and a baseclass with a complex type, this is the actual action of assigning a Complex Value of a property to a specific Baseclass , any Baseclasss
     * @param propertyId the ID of the Property instance to use
     * @param baseclassId The ID of the Baseclass to which we want to assign this complex value
     * @param valueId The ID of the ? extends Baseclass which is the complex value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    connectPropertyComplexWithHttpInfo(propertyId: string, baseclassId: string, valueId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * connect Property
     * Connect property and a baseclass with simple value, assign a value of a Property to an instance of Baseclass, any Baseclass instance
     * @param propertyId The ID of the property, this Property must be connected eith the Clazz of the Baseclass in the baseclass_id parameter
     * @param baseclassId The Baseclass instance to which this value (for that property) is set
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue The value to set, must be a String
     */
    connectPropertySimpleWithHttpInfo(propertyId: string, baseclassId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    connectToTenantWithHttpInfo(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param type
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    countWithHttpInfo(type: string, authenticationkey?: string, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    countAllofTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countConnectedWithHttpInfo(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    countDisconnectedWithHttpInfo(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create an instance of a Baseclass extender
     * Creates a new instance of the requested Class, pass a properly initialized instance of BaseclassCreationContainer
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createWithHttpInfo(authenticationkey?: string, body?: BaseclassCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create a link
     * Creates a link between two instances in a generic way, provide values of the link
     * @param leftId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param rightId an ID of existing instance, class of which must fit the required class for the supplied Link class
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value The ID of any instance inheriting from FC Baseclass, this effectively creates a triple link
     * @param simpleValue An explicit value of a string that can be part of the link
     * @param check If true, check if the link with these Left, Right and Complex Value values exists, if yes, then it will not be created
     */
    createBaselinkWithHttpInfo(leftId: string, rightId: string, linkClazzName: string, authenticationkey?: string, value?: string, simpleValue?: string, check?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Create a Category
     * Return a single category
     * @param categoryName Inside a user interface categories are displayed by thier name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createCategoryWithHttpInfo(categoryName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * createDevice
     * creates a device
     * @param mac
     * @param serialNumber
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param name
     * @param lat
     * @param lon
     */
    createDeviceWithHttpInfo(mac: string, serialNumber: string, authenticationkey?: string, name?: string, lat?: number, lon?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * createHeapDump
     * create heap dump
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     */
    createHeapDumpWithHttpInfo(authenticationkey?: string, pathparam?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * creates Property
     * creates a property given a type and a name, properties can be created and linked with Types. instances of these types can have associated values
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyName
     * @param propertyType
     */
    createPropertyWithHttpInfo(authenticationkey?: string, propertyName?: string, propertyType?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * creates Property Type
     * creates a property Type given  a name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyTypeName  the name of the property type to create
     */
    createPropertyTypeWithHttpInfo(authenticationkey?: string, propertyTypeName?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createRoleWithHttpInfo(authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * create settings
     * create Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * creates Settings Metadata
     * creates a settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createTenantWithHttpInfo(tenantName: string, apiKey: string, authenticationkey?: string, body?: NewUser, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param tenantName
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createTenantNoUserWithHttpInfo(tenantName: string, apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * createUIInterface
     * creates UI interface
     * @param name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    createUIInterfaceWithHttpInfo(name: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param loginuponsuccess
     * @param body
     */
    createUserWithHttpInfo(authenticationkey?: string, loginuponsuccess?: boolean, body?: NewUserUserClass, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    create_1WithHttpInfo(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * deactivateAllLinks
     * deactivate all links between a device and baseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateAllLinksWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * deactivateLink
     * deactivate link
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateLinkWithHttpInfo(linkId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * delete
     * deletes an entity by id
     * @param id The id of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteByIdWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * delete
     * deletes an entity by id
     * @param id The id of the instance to be deleted
     * @param className The type of the instance to be deleted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteById_2WithHttpInfo(id: string, className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteFileResourceWithHttpInfo(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * deleteHeapDump
     * delete heap dump
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteHeapDumpWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deleteMediaWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Remove a link
     * Remove an existing link by the ID of its &#39;sides&#39;
     * @param leftId The ID of the left side of the link
     * @param rightId The ID of the right side of the link
     * @param linkClazzName The canonical name of the class of the link, for example: com.flexicore.model.MediaToBundle, in this case the left ID must be of Media class and the RightID must be of a bundle class
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    detachEntitiesWithHttpInfo(leftId: string, rightId: string, linkClazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * device get settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Disable Category on Class
     * Disable a previously disabled Category, the CategoryID to be enabled is passed as the entity in the Post request(!)
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.User&#39;
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    disableCategoryWithHttpInfo(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Disconnect from Category
     * Disconnect a Category from an instance of a connected(to this Category) entity in the system
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass and connected to the specified Category
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param catId The ID of an existing Category
     */
    disconnectCategoryWithHttpInfo(baseId: string, authenticationkey?: string, catId?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param id id of the FileResource Object to Download
     */
    downloadWithHttpInfo(authenticationkey: string, id: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * duplicate an entity, shallow by id
     * duplicate an entity by Id , returns null if not successfully duplicated
     * @param id The ID of the entity required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    duplicateWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * duplicate settings
     * duplicate Settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettingsWithHttpInfo(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Enable Category on Class
     * Before a Category can be connected to an INSTANCE of a class it must be enabled to the class, thus a list of categories can be easily filtered by the context of the class at hand, the CategoryID to be enabled is passed as the entity in the Post request(!)
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.User&#39;
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    enableCategoryWithHttpInfo(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * export baseclass
     * exports to file
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportBaseclassWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * export settings
     * export Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    fileResourcesOfTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * finalize
     * finalize FileResource , sending it for processing
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param hint
     * @param fileType
     * @param dontProcess
     */
    finalizeUploadWithHttpInfo(md5: string, authenticationkey?: string, hint?: string, fileType?: string, dontProcess?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * find entity by id and class
     * Find an entity by Id and type, returns null if not found
     * @param id The ID of the entity required
     * @param classname The canonical classname of the required entity
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByIdWithHttpInfo(id: string, classname: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Find an instance by ID
     * Find an instance of a Baseclass extender by its id, returns an instance of a Baseclass
     * @param ID The id of instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_3WithHttpInfo(ID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findById_4WithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Find an instance by its name
     * returns a list of instances of the type requested
     * @param name The name of instance to be found
     * @param classname The cannonical classname of the instance to be found
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    findByNameWithHttpInfo(name: string, classname: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     */
    findBySidesIdWithHttpInfo(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksWithHttpInfo(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksContainersWithHttpInfo(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param left
     * @param right
     * @param classname
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     * @param simpleValue
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    findLinksValuesWithHttpInfo(left: string, right: string, classname: string, authenticationkey?: string, value?: string, simpleValue?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param clientType
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    generateClientWithHttpInfo(clientType: string, authenticationkey?: string, view?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param targetDevice
     */
    getWithHttpInfo(id: string, authenticationkey?: string, targetDevice?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get a list of Categories  by name
     * Get a list of all Categories whose name starts with the supplied string
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getAllCategoriesWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * List Categories  by Instance
     * Get a list of all Categories that are connected to an instance
     * @param baseId The ID of an existing entity in the system, entity must inherit from FC Baseclass
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllCategoriesConnectedWithHttpInfo(baseId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllFileTypesWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get all Operations
     * Get a list of all Operations defined for the this Class, Some Operations have meaning with some Classes only
     * @param clazzName The canonical classname of the link required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllOperationsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * returns a list of views
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAllViewsWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get a list of all associations
     * Returns a list of ClazzLinkContainer instances of the given link(!) canonical name
     * @param clazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getAssociationsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * List Categories  by Class
     * Get a list of all Categories that can be used (previously enabled) by a Class
     * @param className the cannonical name of a Class of an Entity in the system, such Class must extend Baseclass, for Example: &#39;com.flexicore.model.media.Media&#39; will retrieve only Categories that can be used with a Media Object(Instance)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getCategoryWithHttpInfo(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get a list of Categories  by name
     * Get a list of all Categories whose name starts with the supplied string
     * @param name A string that must match the left characters of a retrieved Category name
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getCategoryByNameWithHttpInfo(name: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get a Clazz instance from a canonical name
     * Return a concrete instance of type Clazz, every type in the system including those created by Plug-ins have a concrete instance of Clazz type describing it.
     * @param clazzName The canonical classname for which the instance is required
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getClazzWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getClientsWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param wantedClazzName
     * @param id
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getConnectedWithHttpInfo(wantedClazzName: string, id: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * getDeviceUsedProperties
     * update device used properties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    getDeviceUsedPropertiesWithHttpInfo(mac: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param wantedClazzName
     * @param linkClazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getDisconnectedWithHttpInfo(id: string, wantedClazzName: string, linkClazzName: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, valueId?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    getDocsWithHttpInfo(authenticationkey: string, view?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * get Connected Properties
     * get all properties connected to baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyClazz
     * @param plainView
     */
    getDynamicPropertiesWithHttpInfo(id: string, authenticationkey?: string, propertyClazz?: string, plainView?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * get Connected Properties With Categories
     * get all properties connected to baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param propertyClazz
     * @param plainView
     */
    getDynamicPropertiesWithCategoriesWithHttpInfo(id: string, authenticationkey?: string, propertyClazz?: string, plainView?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    getFeaturesWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Get Field Containers per class
     * get a list of all FieldContainers per class, use it for the creation of a new instance and for updating one
     * @param clazzName The canonical name of the Class for which the list is to be obtained
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFieldsWithHttpInfo(clazzName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFields_5WithHttpInfo(className: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param md5
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getFileResourceWithHttpInfo(md5: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getJobWithHttpInfo(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    getOffsetInfoWithHttpInfo(authenticationkey?: string, body?: UpdateBundle, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getPreviewWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    getProductsWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param grouping
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    getRenderingBundlesWithHttpInfo(grouping: string, id: string, authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * create settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param view
     */
    getSwaggerJSONWithHttpInfo(authenticationkey: string, view?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param apiKey
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getTenantWithHttpInfo(apiKey: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    getTenantsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param viewId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getViewClazzesWithHttpInfo(viewId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * import baseclass
     * import baseclass
     * @param className
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    importBaseclassWithHttpInfo(className: string, authenticationkey?: string, body?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * import settings
     * import Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettingsWithHttpInfo(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    invalidateCacheWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param leftId
     * @param rightId
     * @param operationId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    linkBaseclassTouserWithHttpInfo(leftId: string, rightId: string, operationId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Link Role and User
     * Helper class for linking Role and User using a RoleUserContainer class, can be carried out by using the Generic createBaselink call
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    linkroleuserWithHttpInfo(authenticationkey?: string, body?: RoleUserContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param sortby
     */
    listAllWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, sortby?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * fileResourcesInMediaByGroup
     * lists all media that suites Filtering information holder
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param group
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllFileResourcesOfGroupInMediaWithHttpInfo(id: string, authenticationkey?: string, group?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * get file resources
     * returns all the file resources of the given types that are connected to the given Media
     * @param mediaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllFileResourcesOfTypeWithHttpInfo(mediaId: string, authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listAllLoadedPluginsWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllRolesWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists all Settings
     * lists all settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists all Settings Metadata
     * lists all settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listAllUserRolesWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listAllUsersWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * lists all media that suites Filtering information holder
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listAllofTypeWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listDeviceSettingss
     * list device Settings
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsWithHttpInfo(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listDeviceSettingsContainers
     * list device Settings containers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainersWithHttpInfo(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicesWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listHeapDumps
     * list heap dumps
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param start
     */
    listHeapDumpsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, start?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * lists license requests
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body filtering information
     */
    listLicenseRequestWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listProperties
     * get all Properties, paged, filtered and sorted by a FilteringInformationHolder
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listPropertiesWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listPropertyTypes
     * get all property types, filtered and sorted
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listPropertyTypesWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists Settings
     * lists settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listUIInterfaces
     * lists ui interfaces
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listUIInterfacesWithHttpInfo(authenticationkey?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listUIPluginsByInterface
     * lists plugin by interface
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param interfaceId
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     * @param body
     */
    listUIPluginsByInterfaceWithHttpInfo(authenticationkey?: string, interfaceId?: string, pagesize?: number, currentpage?: number, body?: FilteringInformationHolder, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param email
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    lookupUserByEmailWithHttpInfo(email: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    lookupUserByIdWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param number
     */
    multipleCreateWithHttpInfo(authenticationkey?: string, number?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Find an instance by its name with wildcard
     * returns a list of instances of the type requested
     * @param classname The canonical classname of the required entity list
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body filtering information
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    nameLikeWithHttpInfo(classname: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     */
    pingWithHttpInfo(extraHttpRequestParams?: any): Observable<Response>;
    /**
     * registerAndGetAllowedUIComponents
     * registers components if not exists and returns allowed
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    registerAndGetAllowedUIComponentsWithHttpInfo(authenticationkey?: string, body?: UIComponentsRegistrationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param calcMd5
     */
    registerFileWithHttpInfo(authenticationkey?: string, pathparam?: string, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param path
     * @param hint
     * @param fileType
     * @param dontProcess
     * @param calcMd5
     */
    registerFileAndFinlizeWithHttpInfo(authenticationkey?: string, pathparam?: string, hint?: string, fileType?: string, dontProcess?: boolean, calcMd5?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    restartWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setsActiveSettings
     * sets active settings for settingsMetadata
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsWithHttpInfo(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setActiveSettingsAsDefault
     * sets active settings for settingsMetadata as null(using default values)
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setDeviceUsedProperties
     * update device used properties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setDeviceUsedPropertiesWithHttpInfo(mac: string, authenticationkey?: string, body?: DeviceUsedPropertiesContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setLinkUpdateDate
     * Sets Link as Updated
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param date
     */
    setLinkUpdateDateWithHttpInfo(linkId: string, authenticationkey?: string, date?: Date, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * set Property
     * set Property to use with specific Clazz, a Clazz is an Entity in FlexiCore, the PropertySetContainer has the required default values for both simple and complex values
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setPropertyWithHttpInfo(authenticationkey?: string, body?: PropertySetContainerBaseclass, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * softDelete
     * soft delete baseclass
     * @param id
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    softDeleteWithHttpInfo(id: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    stopJobWithHttpInfo(jobID: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    testUpdateWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update an instance of a Baseclass extender
     * Update an instance,retrieve the related fields first, create BaseclassUpdateContainer with required fields
     * @param id
     * @param clazzName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateWithHttpInfo(id: string, clazzName: string, authenticationkey?: string, body?: BaseclassUpdateContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * Update basic data
     * Update an instance of a Baseclass using a BasicContainer instance
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    updateBasicDetailsWithHttpInfo(authenticationkey?: string, body?: BasicContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param phaseName
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPhaseWithHttpInfo(jobID: string, phaseName: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param jobID
     * @param key
     * @param value
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateJobPropertyWithHttpInfo(jobID: string, key: string, value: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * update metadata property
     * update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimpleWithHttpInfo(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * updateSimple
     * update Simple value of a Dynamic Property of a Baseclass instance
     * @param linkId The link id (of PropertyToBaseclass type)
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue The value to update
     */
    updateSimpleWithHttpInfo(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param id
     * @param updateTo
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    updateVersionWithHttpInfo(id: string, updateTo: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    update_6WithHttpInfo(authenticationkey?: string, body?: Media, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    uploadFileMultiWithHttpInfo(authenticationkey?: string, body?: MultipartFormDataInput, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    validateWithHttpInfo(authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
}
