/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Device } from '../model/device';
import { DevicePropertyContainerObject } from '../model/devicePropertyContainerObject';
import { DeviceToBaseclass } from '../model/deviceToBaseclass';
import { DeviceUsedPropertiesContainer } from '../model/deviceUsedPropertiesContainer';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { Configuration } from '../configuration';
export declare class DevicesService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * activate a link between a device and baseclass
     * @summary activateLink
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    activateLink(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * Connect a Device to an instance of any entity in the system
     * @summary connectDeviceToBaseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param someHeader
     */
    connectDeviceToBaseclass(baseId: string, mac: string, authenticationkey?: string, someHeader?: string, extraHttpRequestParams?: any): Observable<DeviceToBaseclass>;
    /**
     * creates a device
     * @summary createDevice
     * @param mac
     * @param serialNumber
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param name
     * @param lat
     * @param lon
     */
    createDevice(mac: string, serialNumber: string, authenticationkey?: string, name?: string, lat?: number, lon?: number, extraHttpRequestParams?: any): Observable<Device>;
    /**
     * deactivate all links between a device and baseclass
     * @summary deactivateAllLinks
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateAllLinks(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<number>;
    /**
     * deactivate link
     * @summary deactivateLink
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateLink(linkId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * update device used properties
     * @summary getDeviceUsedProperties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    getDeviceUsedProperties(mac: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<DevicePropertyContainerObject>>;
    /**
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevices(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Array<Device>>;
    /**
     * update device used properties
     * @summary setDeviceUsedProperties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setDeviceUsedProperties(mac: string, authenticationkey?: string, body?: DeviceUsedPropertiesContainer, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * Sets Link as Updated
     * @summary setLinkUpdateDate
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param date
     */
    setLinkUpdateDate(linkId: string, authenticationkey?: string, date?: Date, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * activateLink
     * activate a link between a device and baseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    activateLinkWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * connectDeviceToBaseclass
     * Connect a Device to an instance of any entity in the system
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param someHeader
     */
    connectDeviceToBaseclassWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, someHeader?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * createDevice
     * creates a device
     * @param mac
     * @param serialNumber
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param name
     * @param lat
     * @param lon
     */
    createDeviceWithHttpInfo(mac: string, serialNumber: string, authenticationkey?: string, name?: string, lat?: number, lon?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * deactivateAllLinks
     * deactivate all links between a device and baseclass
     * @param baseId
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateAllLinksWithHttpInfo(baseId: string, mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * deactivateLink
     * deactivate link
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deactivateLinkWithHttpInfo(linkId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * getDeviceUsedProperties
     * update device used properties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    getDeviceUsedPropertiesWithHttpInfo(mac: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     *
     * @param authenticationKey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentPage The current page or -1 for full list
     */
    listDevicesWithHttpInfo(authenticationKey?: string, body?: FilteringInformationHolder, pagesize?: number, currentPage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setDeviceUsedProperties
     * update device used properties
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    setDeviceUsedPropertiesWithHttpInfo(mac: string, authenticationkey?: string, body?: DeviceUsedPropertiesContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setLinkUpdateDate
     * Sets Link as Updated
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param date
     */
    setLinkUpdateDateWithHttpInfo(linkId: string, authenticationkey?: string, date?: Date, extraHttpRequestParams?: any): Observable<Response>;
}
