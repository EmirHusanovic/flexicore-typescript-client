/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs';
import { DeviceSettingsContainer } from '../model/deviceSettingsContainer';
import { FileResource } from '../model/fileResource';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { PropertyToSettingsMetadata } from '../model/propertyToSettingsMetadata';
import { Settings } from '../model/settings';
import { SettingsContainer } from '../model/settingsContainer';
import { SettingsMetadata } from '../model/settingsMetadata';
import { SettingsMetadataCreationContainer } from '../model/settingsMetadataCreationContainer';
import { Configuration } from '../configuration';
export declare class SettingsService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * attach Property to metadata
     * @summary attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadata(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata>;
    /**
     * create Settings
     * @summary create settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettings(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings>;
    /**
     * creates a settings metadata
     * @summary creates Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadata(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<SettingsMetadata>;
    /**
     * create Settings
     * @summary device get settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer>;
    /**
     * duplicate Settings
     * @summary duplicate settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettings(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings>;
    /**
     * export Settings
     * @summary export settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource>;
    /**
     * create Settings
     * @summary create settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer>;
    /**
     * import Settings
     * @summary import settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettings(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<boolean>;
    /**
     * lists all settings
     * @summary lists all Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettings(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>>;
    /**
     * lists all settings metadata
     * @summary lists all Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadata(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<SettingsMetadata>>;
    /**
     * list device Settings
     * @summary listDeviceSettingss
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettings(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<DeviceSettingsContainer>>;
    /**
     * list device Settings containers
     * @summary listDeviceSettingsContainers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainers(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<SettingsContainer>>;
    /**
     * lists settings
     * @summary lists Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettings(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>>;
    /**
     * sets active settings for settingsMetadata
     * @summary setsActiveSettings
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettings(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * sets active settings for settingsMetadata as null(using default values)
     * @summary setActiveSettingsAsDefault
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefault(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}>;
    /**
     * update metadata property
     * @summary update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimple(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata>;
    /**
     * attach Property to metadata
     * attach Property to metadata
     * @param settingsMetaId
     * @param propertyId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value
     */
    attachPropertyToMetadataWithHttpInfo(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * create settings
     * create Settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    createSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * creates Settings Metadata
     * creates a settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    createSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * device get settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    deviceGetSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * duplicate settings
     * duplicate Settings
     * @param originalSettingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     */
    duplicateSettingsWithHttpInfo(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * export settings
     * export Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    exportSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * create settings
     * create Settings
     * @param settingsId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    getSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * import settings
     * import Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param byName
     * @param dontUpdate
     */
    importSettingsWithHttpInfo(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists all Settings
     * lists all settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists all Settings Metadata
     * lists all settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listAllSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listDeviceSettingss
     * list device Settings
     * @param deviceId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsWithHttpInfo(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * listDeviceSettingsContainers
     * list device Settings containers
     * @param mac
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    listDeviceSettingsContainersWithHttpInfo(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * lists Settings
     * lists settings
     * @param settingsMetadataId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    listSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setsActiveSettings
     * sets active settings for settingsMetadata
     * @param settingsMetaId
     * @param settingId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsWithHttpInfo(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * setActiveSettingsAsDefault
     * sets active settings for settingsMetadata as null(using default values)
     * @param settingsMetaId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     * update metadata property
     * update metadata property
     * @param linkId
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue
     */
    updateMetadataSimpleWithHttpInfo(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response>;
}
