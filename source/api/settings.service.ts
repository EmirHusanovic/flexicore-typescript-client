/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V1.1.0
 * Contact: avishaybennatan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';  import { FlexiCoreDecycle }                      from './flexiCoreDecycle';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';

import { DeviceSettingsContainer } from '../model/deviceSettingsContainer';
import { FileResource } from '../model/fileResource';
import { FilteringInformationHolder } from '../model/filteringInformationHolder';
import { PropertyToSettingsMetadata } from '../model/propertyToSettingsMetadata';
import { Settings } from '../model/settings';
import { SettingsContainer } from '../model/settingsContainer';
import { SettingsMetadata } from '../model/settingsMetadata';
import { SettingsMetadataCreationContainer } from '../model/settingsMetadataCreationContainer';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SettingsService {

    protected basePath = 'https://192.168.0.41:8080/FlexiCore/rest';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * attach Property to metadata
     * @summary attach Property to metadata
     * @param settingsMetaId 
     * @param propertyId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value 
     */
    public attachPropertyToMetadata(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata> {
        return this.attachPropertyToMetadataWithHttpInfo(settingsMetaId, propertyId, authenticationkey, value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * create Settings
     * @summary create settings
     * @param settingsMetadataId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public createSettings(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings> {
        return this.createSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * creates a settings metadata
     * @summary creates Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    public createSettingsMetadata(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<SettingsMetadata> {
        return this.createSettingsMetadataWithHttpInfo(authenticationkey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * create Settings
     * @summary device get settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public deviceGetSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer> {
        return this.deviceGetSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * duplicate Settings
     * @summary duplicate settings
     * @param originalSettingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public duplicateSettings(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Settings> {
        return this.duplicateSettingsWithHttpInfo(originalSettingsId, authenticationkey, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * export Settings
     * @summary export settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public exportSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<FileResource> {
        return this.exportSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * create Settings
     * @summary create settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getSettings(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<SettingsContainer> {
        return this.getSettingsWithHttpInfo(settingsId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * import Settings
     * @summary import settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param byName 
     * @param dontUpdate 
     */
    public importSettings(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<boolean> {
        return this.importSettingsWithHttpInfo(authenticationkey, body, byName, dontUpdate, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * lists all settings
     * @summary lists all Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listAllSettings(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>> {
        return this.listAllSettingsWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * lists all settings metadata
     * @summary lists all Settings Metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listAllSettingsMetadata(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<SettingsMetadata>> {
        return this.listAllSettingsMetadataWithHttpInfo(authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * list device Settings
     * @summary listDeviceSettingss
     * @param deviceId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public listDeviceSettings(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<DeviceSettingsContainer>> {
        return this.listDeviceSettingsWithHttpInfo(deviceId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * list device Settings containers
     * @summary listDeviceSettingsContainers
     * @param mac 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public listDeviceSettingsContainers(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Array<SettingsContainer>> {
        return this.listDeviceSettingsContainersWithHttpInfo(mac, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * lists settings
     * @summary lists Settings
     * @param settingsMetadataId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listSettings(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Array<Settings>> {
        return this.listSettingsWithHttpInfo(settingsMetadataId, authenticationkey, body, pagesize, currentpage, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * sets active settings for settingsMetadata
     * @summary setsActiveSettings
     * @param settingsMetaId 
     * @param settingId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public setActiveSettings(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.setActiveSettingsWithHttpInfo(settingsMetaId, settingId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * sets active settings for settingsMetadata as null(using default values)
     * @summary setActiveSettingsAsDefault
     * @param settingsMetaId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public setActiveSettingsAsDefault(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId, authenticationkey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }

    /**
     * update metadata property
     * @summary update metadata property
     * @param linkId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue 
     */
    public updateMetadataSimple(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<PropertyToSettingsMetadata> {
        return this.updateMetadataSimpleWithHttpInfo(linkId, authenticationkey, simpleValue, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return  FlexiCoreDecycle.retrocycle(response.json()) || {};
                }
            });
    }


    /**
     * attach Property to metadata
     * attach Property to metadata
     * @param settingsMetaId 
     * @param propertyId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param value 
     */
    public attachPropertyToMetadataWithHttpInfo(settingsMetaId: string, propertyId: string, authenticationkey?: string, value?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/attachPropertyToMetadata/${settingsMetaId}/${propertyId}'
                    .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId))
                    .replace('${' + 'propertyId' + '}', String(propertyId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling attachPropertyToMetadata.');
        }
        // verify required parameter 'propertyId' is not null or undefined
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling attachPropertyToMetadata.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (value !== undefined && value !== null) {
            headers.set('value', String(value));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * create settings
     * create Settings
     * @param settingsMetadataId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public createSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/createSettings/${settingsMetadataId}'
                    .replace('${' + 'settingsMetadataId' + '}', String(settingsMetadataId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsMetadataId' is not null or undefined
        if (settingsMetadataId === null || settingsMetadataId === undefined) {
            throw new Error('Required parameter settingsMetadataId was null or undefined when calling createSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * creates Settings Metadata
     * creates a settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body Settings metadata container
     */
    public createSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/new';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * device get settings
     * create Settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public deviceGetSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/deviceGetSettings/${settingsId}'
                    .replace('${' + 'settingsId' + '}', String(settingsId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling deviceGetSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * duplicate settings
     * duplicate Settings
     * @param originalSettingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     */
    public duplicateSettingsWithHttpInfo(originalSettingsId: string, authenticationkey?: string, body?: SettingsMetadataCreationContainer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/duplicateSettings/${originalSettingsId}'
                    .replace('${' + 'originalSettingsId' + '}', String(originalSettingsId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'originalSettingsId' is not null or undefined
        if (originalSettingsId === null || originalSettingsId === undefined) {
            throw new Error('Required parameter originalSettingsId was null or undefined when calling duplicateSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * export settings
     * export Settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public exportSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/exportSettings/${settingsId}'
                    .replace('${' + 'settingsId' + '}', String(settingsId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling exportSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * create settings
     * create Settings
     * @param settingsId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public getSettingsWithHttpInfo(settingsId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/${settingsId}'
                    .replace('${' + 'settingsId' + '}', String(settingsId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsId' is not null or undefined
        if (settingsId === null || settingsId === undefined) {
            throw new Error('Required parameter settingsId was null or undefined when calling getSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * import settings
     * import Settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param byName 
     * @param dontUpdate 
     */
    public importSettingsWithHttpInfo(authenticationkey?: string, body?: SettingsContainer, byName?: boolean, dontUpdate?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/importSettings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (byName !== undefined && byName !== null) {
            headers.set('byName', String(byName));
        }

        if (dontUpdate !== undefined && dontUpdate !== null) {
            headers.set('dontUpdate', String(dontUpdate));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * lists all Settings
     * lists all settings
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listAllSettingsWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/listAllSettings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }

        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * lists all Settings Metadata
     * lists all settings metadata
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listAllSettingsMetadataWithHttpInfo(authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }

        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * listDeviceSettingss
     * list device Settings
     * @param deviceId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public listDeviceSettingsWithHttpInfo(deviceId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/listDeviceSettings/${deviceId}'
                    .replace('${' + 'deviceId' + '}', String(deviceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'deviceId' is not null or undefined
        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling listDeviceSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * listDeviceSettingsContainers
     * list device Settings containers
     * @param mac 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public listDeviceSettingsContainersWithHttpInfo(mac: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/listDeviceSettingsContainers/${mac}'
                    .replace('${' + 'mac' + '}', String(mac));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'mac' is not null or undefined
        if (mac === null || mac === undefined) {
            throw new Error('Required parameter mac was null or undefined when calling listDeviceSettingsContainers.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * lists Settings
     * lists settings
     * @param settingsMetadataId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param body 
     * @param pagesize Number of entries to be retrieved per page or -1 for full list
     * @param currentpage The current page or -1 for full list
     */
    public listSettingsWithHttpInfo(settingsMetadataId: string, authenticationkey?: string, body?: FilteringInformationHolder, pagesize?: number, currentpage?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/listSettings/${settingsMetadataId}'
                    .replace('${' + 'settingsMetadataId' + '}', String(settingsMetadataId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsMetadataId' is not null or undefined
        if (settingsMetadataId === null || settingsMetadataId === undefined) {
            throw new Error('Required parameter settingsMetadataId was null or undefined when calling listSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (pagesize !== undefined && pagesize !== null) {
            headers.set('pagesize', String(pagesize));
        }

        if (currentpage !== undefined && currentpage !== null) {
            headers.set('currentpage', String(currentpage));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * setsActiveSettings
     * sets active settings for settingsMetadata
     * @param settingsMetaId 
     * @param settingId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public setActiveSettingsWithHttpInfo(settingsMetaId: string, settingId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/setActiveSettings/${settingsMetaId}/${settingId}'
                    .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId))
                    .replace('${' + 'settingId' + '}', String(settingId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling setActiveSettings.');
        }
        // verify required parameter 'settingId' is not null or undefined
        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling setActiveSettings.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * setActiveSettingsAsDefault
     * sets active settings for settingsMetadata as null(using default values)
     * @param settingsMetaId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     */
    public setActiveSettingsAsDefaultWithHttpInfo(settingsMetaId: string, authenticationkey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/setActiveSettingsAsDefault/${settingsMetaId}'
                    .replace('${' + 'settingsMetaId' + '}', String(settingsMetaId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'settingsMetaId' is not null or undefined
        if (settingsMetaId === null || settingsMetaId === undefined) {
            throw new Error('Required parameter settingsMetaId was null or undefined when calling setActiveSettingsAsDefault.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * update metadata property
     * update metadata property
     * @param linkId 
     * @param authenticationkey The AuthenticationKey retrieved when sign-in into the system
     * @param simpleValue 
     */
    public updateMetadataSimpleWithHttpInfo(linkId: string, authenticationkey?: string, simpleValue?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/settings/updateMetadataSimple/${linkId}'
                    .replace('${' + 'linkId' + '}', String(linkId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling updateMetadataSimple.');
        }
        if (authenticationkey !== undefined && authenticationkey !== null) {
            headers.set('authenticationkey', String(authenticationkey));
        }

        if (simpleValue !== undefined && simpleValue !== null) {
            headers.set('simpleValue', String(simpleValue));
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
